import gradio as gr
import json
import sys
import os
import asyncio
from datetime import datetime
from pathlib import Path
from collections import deque

# Get current file directory
current_dir = os.path.dirname(os.path.abspath(__file__))

# Add parent directory to Python search path
sys.path.append(os.path.dirname(current_dir))

from stage_1_label.code.llm_generate_label import LLMGenerateLabel, process_single_line
from feature_generate_judge import FeatureGenerateJudgeProcessor
from feature_tool_variant_generator import ToolVariantGenerator
from feature_tool_list_manager import tool_list_manager

class GradioLabelGenerator:
    def __init__(self):
        self.is_running = False
        self.current_task = None
        self.llm_outputs = deque(maxlen=100)  # Save latest 100 LLM outputs
        self.current_input_file = ""
        self.current_output_file = ""
    
    async def process_data(
        self,
        input_file: str,
        output_file: str,
        residue_file: str,
        max_lines: int,
        concurrency: int,
        model: str,
        temperature: float,
        max_tokens: int,
        progress=gr.Progress()
    ):
        """Main data processing function"""
        try:
            self.is_running = True
            self.llm_outputs.clear()
            self.current_input_file = input_file
            self.current_output_file = output_file
            
            # Validate input file
            if not os.path.exists(input_file):
                return f"‚ùå Error: Input file does not exist - {input_file}", ""
            
            # Create output directory
            os.makedirs(os.path.dirname(output_file) if os.path.dirname(output_file) else ".", exist_ok=True)
            if residue_file:
                os.makedirs(os.path.dirname(residue_file) if os.path.dirname(residue_file) else ".", exist_ok=True)
            
            # Initialize generator
            generator_label = LLMGenerateLabel(
                model=model,
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            # Read data
            processed_data = []
            residue_data = []
            generate_count = 1
            
            progress(0, desc=f"üìö Reading data...")
            
            with open(input_file, "r", encoding='utf-8') as f:
                for line in f:
                    try:
                        line_data = json.loads(line)
                        
                        if generate_count <= max_lines:
                            processed_data.append((line_data, generate_count))
                        else:
                            residue_data.append(line_data)
                        
                        generate_count += 1
                    except json.JSONDecodeError as e:
                        print(f"Line {generate_count} JSON parsing failed: {e}")
                        generate_count += 1
                        continue
            
            total_count = generate_count - 1
            process_count = len(processed_data)
            residue_count = len(residue_data)
            
            status_msg = f"""üìä Data reading completed:
   - Total data: {total_count} items
   - For processing: {process_count} items
   - Remaining data: {residue_count} items
   - Concurrency: {concurrency}
"""
            print(status_msg)
            
            # Save remaining data
            if residue_data and residue_file:
                progress(0.1, desc=f"üíæ Saving remaining data...")
                with open(residue_file, "w", encoding='utf-8') as rf:
                    for residue_item in residue_data:
                        rf.write(json.dumps(residue_item, ensure_ascii=False) + '\n')
                print(f"‚úÖ Remaining {len(residue_data)} data items saved to: {residue_file}")
            
            if not processed_data:
                return "‚ö†Ô∏è  No data to process, program ends", ""
            
            # Define content callback function
            async def content_callback(line_num, content, question):
                # Save to deque
                self.llm_outputs.append({
                    "line": line_num,
                    "question": question,
                    "content": content,
                    "time": datetime.now().strftime('%H:%M:%S')
                })
            
            # Create semaphore to control concurrency
            semaphore = asyncio.Semaphore(concurrency)
            
            async def process_with_semaphore(data_item):
                async with semaphore:
                    line_data, count = data_item
                    return await process_single_line(generator_label, line_data, count, content_callback)
            
            # Concurrent data processing
            progress(0.2, desc=f"üöÄ Starting concurrent processing of {process_count} data items...")
            
            tasks = [process_with_semaphore(data_item) for data_item in processed_data]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Save results
            progress(0.8, desc=f"üíæ Saving processing results...")
            
            success_count = 0
            error_count = 0
            
            with open(output_file, "w", encoding='utf-8') as w:
                for i, result in enumerate(results):
                    original_count = processed_data[i][1]
                    
                    if isinstance(result, Exception):
                        print(f"‚ùå Data item {original_count} processing exception: {result}")
                        line_data = processed_data[i][0]
                        line_data["processing_error"] = f"Processing exception: {str(result)}"
                        line_data["reasoning"] = "Processing exception"
                        line_data["tool_select"] = "Processing exception"
                        line_data["route_select"] = "Processing exception"
                        processed_line = line_data
                        error_count += 1
                    else:
                        processed_line = result
                        success_count += 1
                    
                    w.write(json.dumps(processed_line, ensure_ascii=False) + '\n')
                    
                    # Update progress
                    if (i + 1) % 10 == 0:
                        progress_percent = 0.8 + 0.2 * (i + 1) / len(results)
                        progress(progress_percent, desc=f"üíæ Saved {i + 1}/{len(results)} items")
            
            progress(1.0, desc="‚úÖ Processing completed!")
            
            final_msg = f"""
‚úÖ Processing completed!

üìä Statistics:
   - Processed data: {process_count} items
   - Success: {success_count} items
   - Failed: {error_count} items
   - Remaining data: {residue_count} items
   - Concurrency: {concurrency}

üìÅ Output files:
   - Processing results: {output_file}
   - Remaining data: {residue_file if residue_file else 'Not set'}

‚è∞ Completion time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            # Generate LLM output summary
            llm_summary = self._generate_llm_summary()
            
            return final_msg, llm_summary
            
        except Exception as e:
            import traceback
            error_msg = f"‚ùå Error occurred during processing:\n{str(e)}\n\nDetailed information:\n{traceback.format_exc()}"
            return error_msg, ""
        finally:
            self.is_running = False
    
    def _generate_llm_summary(self):
        """Generate LLM output summary"""
        if not self.llm_outputs:
            return "No LLM output records available"
        
        summary = f"üìù Total {len(self.llm_outputs)} LLM outputs recorded\n\n"
        summary += "="*80 + "\n\n"
        
        for output in self.llm_outputs:
            summary += f"üîπ Item {output['line']} | Time: {output['time']}\n"
            summary += f"‚ùì Question: {output['question'][:100]}...\n" if len(output['question']) > 100 else f"‚ùì Question: {output['question']}\n"
            summary += f"üí¨ LLM Response:\n{output['content']}\n"
            summary += "="*80 + "\n\n"
        
        return summary
    
    def run_process(
        self,
        input_file,
        output_file,
        residue_file,
        max_lines,
        concurrency,
        model,
        temperature,
        max_tokens
    ):
        """Synchronous wrapper"""
        return asyncio.run(self.process_data(
            input_file,
            output_file,
            residue_file,
            max_lines,
            concurrency,
            model,
            temperature,
            max_tokens
        ))
    
    def load_jsonl_file(self, file_path):
        """Load JSONL file"""
        if not file_path or not os.path.exists(file_path):
            return []
        
        data = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for i, line in enumerate(f, 1):
                    try:
                        data.append((i, json.loads(line)))
                    except json.JSONDecodeError:
                        data.append((i, {"error": "JSON parsing failed"}))
        except Exception as e:
            return [(0, {"error": f"File reading failed: {str(e)}"})]
        
        return data
    
    def get_line_content(self, file_path, line_number):
        """Get content of specified line"""
        data = self.load_jsonl_file(file_path)
        
        if not data:
            return "File is empty or does not exist"
        
        if line_number < 1 or line_number > len(data):
            return f"Line number out of range (1-{len(data)})"
        
        line_num, content = data[line_number - 1]
        return json.dumps(content, ensure_ascii=False, indent=2)
    
    def get_file_info(self, file_path):
        """Get file information"""
        if not file_path or not os.path.exists(file_path):
            return "File does not exist", 0
        
        data = self.load_jsonl_file(file_path)
        total_lines = len(data)
        
        info = f"""
üìÑ File path: {file_path}
üìä Total lines: {total_lines}
üìÖ Modified time: {datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S')}
üíæ File size: {os.path.getsize(file_path) / 1024:.2f} KB
"""
        return info, total_lines


# Create global instances
generator_feature1 = ToolVariantGenerator()
generator_feature2 = GradioLabelGenerator()
generator_gen_judge = FeatureGenerateJudgeProcessor()

# ==================== Folder and file path processing functions ====================
def scan_folder_for_files(folder_path, extension=".jsonl"):
    """
    Scan folder and return file list with specified extension
    
    Args:
        folder_path: Folder path
        extension: File extension (default .jsonl)
    
    Returns:
        list: File name list
    """
    if not folder_path or not os.path.exists(folder_path):
        return []
    
    try:
        files = []
        for filename in os.listdir(folder_path):
            if filename.endswith(extension):
                files.append(filename)
        return sorted(files)
    except Exception as e:
        print(f"Folder scanning failed: {e}")
        return []

def get_full_path(folder_path, filename):
    """
    Concatenate complete file path
    
    Args:
        folder_path: Folder path
        filename: File name
    
    Returns:
        str: Complete path
    """
    if not folder_path or not filename:
        return ""
    return os.path.join(folder_path, filename)

# ==================== File viewer related functions ====================
def view_file_content(processor, file_type, custom_path, line_number):
    """View file content - general function"""
    # Determine file path to view
    if file_type == "Input file":
        file_path = processor.current_input_file
    elif file_type == "Output file":
        file_path = processor.current_output_file
    else:  # Custom path
        file_path = custom_path
    
    if not file_path:
        return "Please run processing task first or enter custom file path", ""
    
    # Get file information
    info, total_lines = processor.get_file_info(file_path)
    
    # Get specified line content
    if line_number and line_number > 0:
        content = processor.get_line_content(file_path, int(line_number))
    else:
        content = "Please enter line number to view"
    
    return info, content

def update_line_slider(processor, file_type, custom_path):
    """Update line number slider maximum value - general function"""
    if file_type == "Input file":
        file_path = processor.current_input_file
    elif file_type == "Output file":
        file_path = processor.current_output_file
    else:
        file_path = custom_path
    
    if not file_path or not os.path.exists(file_path):
        return gr.update(maximum=1, value=1)
    
    _, total_lines = processor.get_file_info(file_path)
    return gr.update(maximum=max(1, total_lines), value=1)

# ==================== UI component building functions ====================
def create_file_viewer(processor, tab_name):
    """Create file viewer component - reusable"""
    gr.Markdown(f"""
    ### üìñ {tab_name} - File Content Viewer
    
    View each data item in input or output files.
    """)
    
    with gr.Row():
        with gr.Column(scale=1):
            file_type = gr.Radio(
                label="Select file type",
                choices=["Input file", "Output file", "Custom path"],
                value="Input file"
            )
            
            custom_file_path = gr.Textbox(
                label="Custom file path (used when selecting custom path)",
                placeholder="/path/to/your/file.jsonl",
                visible=False
            )
            
            line_number = gr.Slider(
                label="Select line number",
                minimum=1,
                maximum=100,
                value=1,
                step=1,
                interactive=True
            )
            
            view_btn = gr.Button("üîç View Content", variant="primary")
        
        with gr.Column(scale=2):
            file_info = gr.Textbox(
                label="File information",
                lines=5,
                interactive=False
            )
            
            line_content = gr.Textbox(
                label="Line content (JSON format)",
                lines=20,
                interactive=False
            )
    
    # Bind events
    def on_file_type_change(file_type):
        if file_type == "Custom path":
            return gr.update(visible=True), gr.update(maximum=1, value=1)
        else:
            slider_update = update_line_slider(processor, file_type, "")
            return gr.update(visible=False), slider_update
    
    file_type.change(
        fn=on_file_type_change,
        inputs=[file_type],
        outputs=[custom_file_path, line_number]
    )
    
    custom_file_path.change(
        fn=lambda ft, cp: update_line_slider(processor, ft, cp),
        inputs=[file_type, custom_file_path],
        outputs=[line_number]
    )
    
    view_btn.click(
        fn=lambda ft, cp, ln: view_file_content(processor, ft, cp, ln),
        inputs=[file_type, custom_file_path, line_number],
        outputs=[file_info, line_content]
    )
    
    line_number.change(
        fn=lambda ft, cp, ln: view_file_content(processor, ft, cp, ln),
        inputs=[file_type, custom_file_path, line_number],
        outputs=[file_info, line_content]
    )
    
    return file_type, custom_file_path, line_number, view_btn, file_info, line_content

# ==================== Main Interface ====================
def create_ui():
    with gr.Blocks(title="LLM Data Labeling Tool", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
        # üè∑Ô∏è LLM Data Processing Tool Suite
        
        Multi-functional data processing platform supporting various data processing tasks and real-time monitoring.
        """)
        
        # ========== Top-level Tabs: Distinguish different functions ==========
        with gr.Tabs() as main_tabs:
            
            
            
            # ==================== ÂäüËÉΩ‰∏ÄÔºöÂ∑•ÂÖ∑Âèò‰ΩìÁîüÊàê ====================
            with gr.Tab("üîß ÂäüËÉΩ‰∏ÄÔºöÂ∑•ÂÖ∑Âèò‰ΩìÁîüÊàê"):
                with gr.Tabs():
                    # ÂäüËÉΩ‰∏Ä - Â∑•ÂÖ∑Âèò‰ΩìÁîüÊàê
                    with gr.Tab("üìù Â∑•ÂÖ∑Âèò‰ΩìÁîüÊàê"):
                        with gr.Row():
                            with gr.Column(scale=2):
                                gr.Markdown("### üìÅ Â∑•ÂÖ∑ÈÖçÁΩÆ")
                                
                                f2_original_tool = gr.Code(
                                    label="ÂéüÂßãÂ∑•ÂÖ∑JSON",
                                    language="json",
                                    value="""{
  "name": "example_search",
  "description": "Á§∫‰æãÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÁî®‰∫éÊü•ÊâæÁõ∏ÂÖ≥‰ø°ÊÅØ",
  "parameters": {
    "type": "object",
    "properties": {
      "query": {
        "type": "string",
        "description": "ÊêúÁ¥¢Êü•ËØ¢ÂÜÖÂÆπ"
      },
      "category": {
        "type": "string",
        "description": "ÊêúÁ¥¢Á±ªÂà´"
      }
    },
    "required": ["query"]
  }
}""",
                                    lines=15
                                )
                                
                                f2_output_file = gr.Textbox(
                                    label="ËæìÂá∫Êñá‰ª∂Ë∑ØÂæÑ",
                                    placeholder="/path/to/output.jsonl",
                                    value="/mnt/dolphinfs/hdd_pool/docker/user/hadoop-mtsearch-assistant/ai-search/chenhao/ToolForge_github/code_perfect/data/original_data/tool_variants.jsonl"
                                )
                            
                            with gr.Column(scale=1):
                                gr.Markdown("### ‚öôÔ∏è ÁîüÊàêÂèÇÊï∞ÈÖçÁΩÆ")
                                
                                f2_target_count = gr.Number(
                                    label="ÁõÆÊ†áÁîüÊàêÊï∞Èáè",
                                    value=20,
                                    precision=0,
                                    minimum=1,
                                    maximum=100
                                )
                                
                                f2_cos_th = gr.Slider(
                                    label="‰ΩôÂº¶Áõ∏‰ººÂ∫¶ÈòàÂÄº",
                                    minimum=0.0,
                                    maximum=1.0,
                                    value=0.7,
                                    step=0.05
                                )
                                
                                f2_bm25_th = gr.Slider(
                                    label="BM25Áõ∏‰ººÂ∫¶ÈòàÂÄº",
                                    minimum=0.0,
                                    maximum=1.0,
                                    value=0.6,
                                    step=0.05
                                )
                                
                                f2_model = gr.Dropdown(
                                    label="Ê®°ÂûãÈÄâÊã©",
                                    choices=[
                                        "anthropic.claude-sonnet-4",
                                        "anthropic.claude-3-5-sonnet",
                                        "anthropic.claude-3-opus",
                                        "gpt-4.1"
                                    ],
                                    value="gpt-4.1"
                                )
                                
                                f2_temperature = gr.Slider(
                                    label="Temperature",
                                    minimum=0.0,
                                    maximum=2.0,
                                    value=1.0,
                                    step=0.1
                                )
                                
                                f2_max_tokens = gr.Number(
                                    label="Max Tokens",
                                    value=8192,
                                    precision=0,
                                    minimum=1024,
                                    maximum=16384
                                )
                        
                        with gr.Row():
                            f2_start_btn = gr.Button("üöÄ ÂºÄÂßãÁîüÊàêÂ∑•ÂÖ∑Âèò‰Ωì", variant="primary", size="lg")
                        
                        with gr.Row():
                            with gr.Column(scale=1):
                                f2_output_status = gr.Textbox(
                                    label="ÁîüÊàêÁä∂ÊÄÅ",
                                    placeholder="Á≠âÂæÖÂºÄÂßã...",
                                    lines=15,
                                    max_lines=20,
                                    interactive=False
                                )
                            
                            with gr.Column(scale=1):
                                f2_generation_log = gr.Textbox(
                                    label="üìã ÁîüÊàêÊó•Âøó",
                                    placeholder="ÁîüÊàêÊó•ÂøóÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...",
                                    lines=15,
                                    max_lines=20,
                                    interactive=False
                                )
                        
                        # ÁªëÂÆöÂäüËÉΩ‰∏ÄÁöÑÂ§ÑÁêÜ‰∫ã‰ª∂
                        f2_start_btn.click(
                            fn=generator_feature1.process_data_tool_variant,
                            inputs=[
                                f2_original_tool,
                                f2_output_file,
                                f2_target_count,
                                f2_cos_th,
                                f2_bm25_th,
                                f2_model,
                                f2_temperature,
                                f2_max_tokens
                            ],
                            outputs=[f2_output_status, f2_generation_log]
                        )
                        
                        gr.Markdown("""
                        ---
                        ### üìñ ÂäüËÉΩËØ¥Êòé
                        
                        **Â∑•ÂÖ∑Âèò‰ΩìÁîüÊàêÂäüËÉΩÔºö**
                        
                        1. **ËæìÂÖ•ÂéüÂßãÂ∑•ÂÖ∑**ÔºöÂú®Â∑¶‰æßJSONÁºñËæëÂô®‰∏≠ËæìÂÖ•Ë¶ÅÁîüÊàêÂèò‰ΩìÁöÑÂéüÂßãÂ∑•ÂÖ∑ÂÆö‰πâ
                        2. **ÈÖçÁΩÆÁîüÊàêÂèÇÊï∞**Ôºö
                           - ÁõÆÊ†áÁîüÊàêÊï∞ÈáèÔºöË¶ÅÁîüÊàêÂ§öÂ∞ë‰∏™Â∑•ÂÖ∑Âèò‰Ωì
                           - ‰ΩôÂº¶Áõ∏‰ººÂ∫¶ÈòàÂÄºÔºöÊéßÂà∂ËØ≠‰πâÁõ∏‰ººÂ∫¶ÔºàË∂äÈ´òË∂äÁõ∏‰ººÔºâ
                           - BM25Áõ∏‰ººÂ∫¶ÈòàÂÄºÔºöÊéßÂà∂ÂÖ≥ÈîÆËØçÁõ∏‰ººÂ∫¶ÔºàË∂ä‰ΩéË∂äÁõ∏‰ººÔºâ
                           - Ê®°ÂûãÂíåÁîüÊàêÂèÇÊï∞ÔºöÊéßÂà∂LLMÁîüÊàêË¥®Èáè
                        3. **Ëá™Âä®ÁîüÊàê**ÔºöÁ≥ªÁªü‰ºöËá™Âä®ÁîüÊàêÁ¨¶ÂêàË¶ÅÊ±ÇÁöÑÂ∑•ÂÖ∑Âèò‰Ωì
                        4. **Áõ∏‰ººÂ∫¶Ê£ÄÊü•**Ôºö‰ΩøÁî®ÂêëÈáèÁõ∏‰ººÂ∫¶ÂíåBM25ÁÆóÊ≥ïÁ°Æ‰øùÂèò‰ΩìË¥®Èáè
                        
                        **ËæìÂá∫Ê†ºÂºèÔºö**
                        - ÊØè‰∏™Â∑•ÂÖ∑Âèò‰Ωì‰øùÂ≠ò‰∏∫‰∏ÄË°åJSON
                        - ‰øùÊåÅÂéüÂßãÂ∑•ÂÖ∑ÁöÑÊ†∏ÂøÉÂäüËÉΩ‰∏çÂèò
                        - Âú®ÂêçÁß∞„ÄÅÊèèËø∞„ÄÅÂèÇÊï∞Á≠âÊñπÈù¢ËøõË°åÂêå‰πâÊõøÊç¢
                        """)
                    
                    # ÂäüËÉΩ‰∏Ä - Êñá‰ª∂Êü•ÁúãÂô®
                    with gr.Tab("üìÇ Êñá‰ª∂Êü•ÁúãÂô®"):
                        create_file_viewer(generator_feature1, "Â∑•ÂÖ∑Âèò‰ΩìÁîüÊàê")
                        
                        gr.Markdown("""
                        ---
                        ### üìñ Êñá‰ª∂Êü•ÁúãÂô®ËØ¥Êòé
                        
                        - **ËæìÂá∫Êñá‰ª∂**ÔºöÊü•ÁúãÁîüÊàêÁöÑÂ∑•ÂÖ∑Âèò‰ΩìÊñá‰ª∂
                        - **Ëá™ÂÆö‰πâË∑ØÂæÑ**ÔºöÊü•Áúã‰ªªÊÑèÂ∑•ÂÖ∑Âèò‰ΩìÊñá‰ª∂
                        - ‰ΩøÁî®ÊªëÂùóÂø´ÈÄüÊµèËßà‰∏çÂêåÁöÑÂ∑•ÂÖ∑Âèò‰Ωì
                        - JSONÊ†ºÂºèÂåñÊòæÁ§∫Ôºå‰æø‰∫éÊü•ÁúãÂ∑•ÂÖ∑ÁªìÊûÑ
                        """)
                    
                    # ÂäüËÉΩ‰∏Ä - Â∑•ÂÖ∑ÂàóË°®ÁÆ°ÁêÜ
                    with gr.Tab("üîß Â∑•ÂÖ∑ÂàóË°®ÁÆ°ÁêÜ"):
                        gr.Markdown("""
                        ### üîß TOOL_LIST ÁÆ°ÁêÜ
                        
                        ÁÆ°ÁêÜ `stage_1_label/code/tool_prompts.py` ‰∏≠ÁöÑ TOOL_LIST ÈÖçÁΩÆ„ÄÇ
                        ‰ªéÂ∑•ÂÖ∑Â∫ì‰∏≠ÈÄâÊã©ÈúÄË¶ÅÁöÑÂ∑•ÂÖ∑Ôºå‰øùÂ≠òÂêé‰ºöËá™Âä®Êõ¥Êñ∞ÈÖçÁΩÆÊñá‰ª∂„ÄÇ
                        """)
                        
                        with gr.Row():
                            # Â∑¶‰æßÔºöÂèØÁî®Â∑•ÂÖ∑ÂàóË°®
                            with gr.Column(scale=2):
                                gr.Markdown("### üì¶ ÂèØÁî®Â∑•ÂÖ∑Â∫ì")
                                
                                tool_refresh_btn = gr.Button("üîÑ Âà∑Êñ∞Â∑•ÂÖ∑ÂàóË°®", size="sm")
                                
                                tool_statistics = gr.Textbox(
                                    label="ÁªüËÆ°‰ø°ÊÅØ",
                                    lines=8,
                                    interactive=False
                                )
                                
                                available_tools_checkbox = gr.CheckboxGroup(
                                    label="ÈÄâÊã©Ë¶ÅÊ∑ªÂä†ÁöÑÂ∑•ÂÖ∑ÔºàÂèØÂ§öÈÄâÔºâ",
                                    choices=[],
                                    value=[],
                                    interactive=True
                                )
                                
                                gr.Markdown("""
                                üí° **ÊèêÁ§∫**Ôºö
                                - ÂãæÈÄâÂ∑•ÂÖ∑ÂêéÔºåÁÇπÂáª"Ê∑ªÂä†Âà∞TOOL_LIST"ÊåâÈíÆ
                                - Â∏¶Êúâ ‚úì Ê†áËÆ∞ÁöÑÂ∑•ÂÖ∑Â∑≤Âú®ÂΩìÂâçTOOL_LIST‰∏≠
                                """)
                            
                            # ‰∏≠Èó¥ÔºöÊìç‰ΩúÊåâÈíÆ
                            with gr.Column(scale=1):
                                gr.Markdown("### üîÑ Êìç‰Ωú")
                                
                                add_tools_btn = gr.Button(
                                    "‚û°Ô∏è Ê∑ªÂä†Âà∞TOOL_LIST",
                                    variant="primary",
                                    size="lg"
                                )
                                
                                gr.Markdown("---")
                                
                                remove_tools_btn = gr.Button(
                                    "‚¨ÖÔ∏è ‰ªéTOOL_LISTÁßªÈô§",
                                    variant="secondary",
                                    size="lg"
                                )
                                
                                gr.Markdown("---")
                                
                                save_tool_list_btn = gr.Button(
                                    "üíæ ‰øùÂ≠òÂà∞tool_prompts.py",
                                    variant="primary",
                                    size="lg"
                                )
                            
                            # Âè≥‰æßÔºöÂΩìÂâçTOOL_LIST
                            with gr.Column(scale=2):
                                gr.Markdown("### üìã ÂΩìÂâç TOOL_LIST")
                                
                                current_tools_checkbox = gr.CheckboxGroup(
                                    label="ÈÄâÊã©Ë¶ÅÁßªÈô§ÁöÑÂ∑•ÂÖ∑ÔºàÂèØÂ§öÈÄâÔºâ",
                                    choices=[],
                                    value=[],
                                    interactive=True
                                )
                                
                                current_tools_display = gr.Textbox(
                                    label="Â∑•ÂÖ∑ËØ¶ÊÉÖ",
                                    lines=15,
                                    interactive=False,
                                    placeholder="ÂΩìÂâçTOOL_LIST‰∏≠ÁöÑÂ∑•ÂÖ∑Â∞ÜÂú®ËøôÈáåÊòæÁ§∫..."
                                )
                        
                        # Áä∂ÊÄÅÊèêÁ§∫
                        with gr.Row():
                            operation_status = gr.Textbox(
                                label="Êìç‰ΩúÁä∂ÊÄÅ",
                                placeholder="Á≠âÂæÖÊìç‰Ωú...",
                                lines=3,
                                interactive=False
                            )
                        
                        # ÂÆö‰πâÂõûË∞ÉÂáΩÊï∞
                        def refresh_tools():
                            """Âà∑Êñ∞Â∑•ÂÖ∑ÂàóË°®"""
                            # Êâ´ÊèèÂ∑•ÂÖ∑Â∫ì
                            tool_list_manager.scan_tool_bank()
                            # Âä†ËΩΩÂΩìÂâçTOOL_LIST
                            tool_list_manager.load_current_tool_list()
                            
                            # Ëé∑ÂèñÂèØÁî®Â∑•ÂÖ∑ÈÄâÈ°π
                            available_choices = []
                            for tool_name in sorted(tool_list_manager.available_tools.keys()):
                                if tool_name in tool_list_manager.current_tool_list:
                                    available_choices.append(f"{tool_name} ‚úì")
                                else:
                                    available_choices.append(tool_name)
                            
                            # Ëé∑ÂèñÂΩìÂâçTOOL_LISTÈÄâÈ°π
                            current_choices = tool_list_manager.current_tool_list.copy()
                            
                            # Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ
                            stats = tool_list_manager.get_statistics()
                            
                            # Ëé∑ÂèñÂΩìÂâçÂ∑•ÂÖ∑ËØ¶ÊÉÖ
                            current_display = tool_list_manager.get_tool_info_text(
                                tool_list_manager.current_tool_list
                            )
                            
                            return (
                                gr.update(choices=available_choices, value=[]),
                                gr.update(choices=current_choices, value=[]),
                                current_display,
                                stats,
                                "‚úÖ Â∑•ÂÖ∑ÂàóË°®Â∑≤Âà∑Êñ∞"
                            )
                        
                        def add_tools(selected_tools):
                            """Ê∑ªÂä†Â∑•ÂÖ∑Âà∞TOOL_LIST"""
                            if not selected_tools:
                                return (
                                    gr.update(),
                                    gr.update(),
                                    gr.update(),
                                    "‚ö†Ô∏è ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÊ∑ªÂä†ÁöÑÂ∑•ÂÖ∑"
                                )
                            
                            # Ê∏ÖÁêÜÂ∑•ÂÖ∑ÂêçÁß∞ÔºàÂéªÊéâ ‚úì Ê†áËÆ∞Ôºâ
                            clean_tools = []
                            for tool in selected_tools:
                                clean_name = tool.replace(" ‚úì", "").strip()
                                clean_tools.append(clean_name)
                            
                            # Ê∑ªÂä†Âà∞ÂΩìÂâçÂàóË°®ÔºàÂéªÈáçÔºâ
                            for tool in clean_tools:
                                if tool not in tool_list_manager.current_tool_list:
                                    tool_list_manager.current_tool_list.append(tool)
                            
                            # Êõ¥Êñ∞ÊòæÁ§∫
                            current_choices = tool_list_manager.current_tool_list.copy()
                            current_display = tool_list_manager.get_tool_info_text(
                                tool_list_manager.current_tool_list
                            )
                            
                            # Êõ¥Êñ∞ÂèØÁî®Â∑•ÂÖ∑ÂàóË°®ÔºàÊ∑ªÂä† ‚úì Ê†áËÆ∞Ôºâ
                            available_choices = []
                            for tool_name in sorted(tool_list_manager.available_tools.keys()):
                                if tool_name in tool_list_manager.current_tool_list:
                                    available_choices.append(f"{tool_name} ‚úì")
                                else:
                                    available_choices.append(tool_name)
                            
                            return (
                                gr.update(choices=current_choices, value=[]),
                                current_display,
                                gr.update(choices=available_choices, value=[]),
                                f"‚úÖ Â∑≤Ê∑ªÂä† {len(clean_tools)} ‰∏™Â∑•ÂÖ∑ÔºàÊú™‰øùÂ≠òÔºåËØ∑ÁÇπÂáª'‰øùÂ≠ò'ÊåâÈíÆÔºâ"
                            )
                        
                        def remove_tools(selected_tools):
                            """‰ªéTOOL_LISTÁßªÈô§Â∑•ÂÖ∑"""
                            if not selected_tools:
                                return (
                                    gr.update(),
                                    gr.update(),
                                    gr.update(),
                                    "‚ö†Ô∏è ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÁßªÈô§ÁöÑÂ∑•ÂÖ∑"
                                )
                            
                            # ‰ªéÂΩìÂâçÂàóË°®ÁßªÈô§
                            for tool in selected_tools:
                                if tool in tool_list_manager.current_tool_list:
                                    tool_list_manager.current_tool_list.remove(tool)
                            
                            # Êõ¥Êñ∞ÊòæÁ§∫
                            current_choices = tool_list_manager.current_tool_list.copy()
                            current_display = tool_list_manager.get_tool_info_text(
                                tool_list_manager.current_tool_list
                            )
                            
                            # Êõ¥Êñ∞ÂèØÁî®Â∑•ÂÖ∑ÂàóË°®ÔºàÁßªÈô§ ‚úì Ê†áËÆ∞Ôºâ
                            available_choices = []
                            for tool_name in sorted(tool_list_manager.available_tools.keys()):
                                if tool_name in tool_list_manager.current_tool_list:
                                    available_choices.append(f"{tool_name} ‚úì")
                                else:
                                    available_choices.append(tool_name)
                            
                            return (
                                gr.update(choices=current_choices, value=[]),
                                current_display,
                                gr.update(choices=available_choices, value=[]),
                                f"‚úÖ Â∑≤ÁßªÈô§ {len(selected_tools)} ‰∏™Â∑•ÂÖ∑ÔºàÊú™‰øùÂ≠òÔºåËØ∑ÁÇπÂáª'‰øùÂ≠ò'ÊåâÈíÆÔºâ"
                            )
                        
                        def save_tool_list():
                            """‰øùÂ≠òTOOL_LISTÂà∞Êñá‰ª∂"""
                            success, message = tool_list_manager.save_tool_list(
                                tool_list_manager.current_tool_list
                            )
                            
                            if success:
                                return f"{message}\n\n‚è∞ ‰øùÂ≠òÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüí° ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞ÔºåÂèØËÉΩÈúÄË¶ÅÈáçÂêØÂ∫îÁî®ÊâçËÉΩÁîüÊïà"
                            else:
                                return message
                        
                        # ÁªëÂÆö‰∫ã‰ª∂
                        tool_refresh_btn.click(
                            fn=refresh_tools,
                            outputs=[
                                available_tools_checkbox,
                                current_tools_checkbox,
                                current_tools_display,
                                tool_statistics,
                                operation_status
                            ]
                        )
                        
                        add_tools_btn.click(
                            fn=add_tools,
                            inputs=[available_tools_checkbox],
                            outputs=[
                                current_tools_checkbox,
                                current_tools_display,
                                available_tools_checkbox,
                                operation_status
                            ]
                        )
                        
                        remove_tools_btn.click(
                            fn=remove_tools,
                            inputs=[current_tools_checkbox],
                            outputs=[
                                current_tools_checkbox,
                                current_tools_display,
                                available_tools_checkbox,
                                operation_status
                            ]
                        )
                        
                        save_tool_list_btn.click(
                            fn=save_tool_list,
                            outputs=[operation_status]
                        )
                        
                        gr.Markdown("""
                        ---
                        ### üìñ ‰ΩøÁî®ËØ¥Êòé
                        
                        1. **Âà∑Êñ∞Â∑•ÂÖ∑ÂàóË°®**ÔºöÁÇπÂáª"üîÑ Âà∑Êñ∞Â∑•ÂÖ∑ÂàóË°®"ÊåâÈíÆÔºåÊâ´ÊèèÂ∑•ÂÖ∑Â∫ì
                        2. **Ê∑ªÂä†Â∑•ÂÖ∑**Ôºö
                           - Âú®Â∑¶‰æßÂãæÈÄâË¶ÅÊ∑ªÂä†ÁöÑÂ∑•ÂÖ∑
                           - ÁÇπÂáª"‚û°Ô∏è Ê∑ªÂä†Âà∞TOOL_LIST"ÊåâÈíÆ
                        3. **ÁßªÈô§Â∑•ÂÖ∑**Ôºö
                           - Âú®Âè≥‰æßÂãæÈÄâË¶ÅÁßªÈô§ÁöÑÂ∑•ÂÖ∑
                           - ÁÇπÂáª"‚¨ÖÔ∏è ‰ªéTOOL_LISTÁßªÈô§"ÊåâÈíÆ
                        4. **‰øùÂ≠òÈÖçÁΩÆ**ÔºöÁÇπÂáª"üíæ ‰øùÂ≠òÂà∞tool_prompts.py"ÊåâÈíÆ
                        5. **Ê≥®ÊÑè**Ôºö‰øùÂ≠òÂêéÂèØËÉΩÈúÄË¶ÅÈáçÂêØÂ∫îÁî®ÊâçËÉΩÂú®ÂÖ∂‰ªñÂäüËÉΩ‰∏≠ÁîüÊïà
                        
                        **Â∑•ÂÖ∑Â∫ìË∑ØÂæÑ**Ôºö`stage_2_generate/tool_bank/tools/`  
                        **ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ**Ôºö`stage_1_label/code/tool_prompts.py`
                        """)
            
# ==================== ÂäüËÉΩ‰∫åÔºöÂ∑•ÂÖ∑Ê†áÊ≥® ====================
            with gr.Tab("üìù ÂäüËÉΩ‰∫åÔºöÂ∑•ÂÖ∑Ê†áÊ≥®"):
                with gr.Tabs():
                    # ÂäüËÉΩ‰∫å - Êï∞ÊçÆÂ§ÑÁêÜ
                    with gr.Tab("üìù Êï∞ÊçÆÂ§ÑÁêÜ"):
                        with gr.Row():
                            with gr.Column(scale=2):
                                gr.Markdown("### üìÅ Êñá‰ª∂Ë∑ØÂæÑÈÖçÁΩÆ")
                                
                                f1_input_file = gr.Textbox(
                                    label="ËæìÂÖ•Êñá‰ª∂Ë∑ØÂæÑ",
                                    placeholder="/path/to/input.jsonl",
                                    value="/mnt/dolphinfs/hdd_pool/docker/user/hadoop-mtsearch-assistant/ai-search/chenhao/ToolForge_github/code_perfect/data/original_data/test_5.jsonl"
                                )
                                
                                f1_output_file = gr.Textbox(
                                    label="ËæìÂá∫Êñá‰ª∂Ë∑ØÂæÑ",
                                    placeholder="/path/to/output.jsonl",
                                    value="/mnt/dolphinfs/hdd_pool/docker/user/hadoop-mtsearch-assistant/ai-search/chenhao/ToolForge_github/code_perfect/data/original_data/test_1.jsonl"
                                )
                                
                                f1_residue_file = gr.Textbox(
                                    label="Ââ©‰ΩôÊï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑÔºàÂèØÈÄâÔºâ",
                                    placeholder="/path/to/residue.jsonl",
                                    value="/mnt/dolphinfs/hdd_pool/docker/user/hadoop-mtsearch-assistant/ai-search/chenhao/ToolForge_github/code_perfect/data/original_data/test_2.jsonl"
                                )
                            
                            with gr.Column(scale=1):
                                gr.Markdown("### ‚öôÔ∏è Â§ÑÁêÜÂèÇÊï∞ÈÖçÁΩÆ")
                                
                                f1_max_lines = gr.Number(
                                    label="Â§ÑÁêÜË°åÊï∞ (MAX_LINES)",
                                    value=5000,
                                    precision=0,
                                    minimum=1
                                )
                                
                                f1_concurrency = gr.Number(
                                    label="Âπ∂ÂèëÊï∞Èáè",
                                    value=10,
                                    precision=0,
                                    minimum=1,
                                    maximum=50
                                )
                                
                                f1_model = gr.Dropdown(
                                    label="Ê®°ÂûãÈÄâÊã©",
                                    choices=[
                                        "anthropic.claude-sonnet-4",
                                        "anthropic.claude-3-5-sonnet",
                                        "anthropic.claude-3-opus",
                                        "gpt-4.1"
                                    ],
                                    value="gpt-4.1"
                                )
                                
                                f1_temperature = gr.Slider(
                                    label="Temperature",
                                    minimum=0.0,
                                    maximum=1.0,
                                    value=0.0,
                                    step=0.1
                                )
                                
                                f1_max_tokens = gr.Number(
                                    label="Max Tokens",
                                    value=8192,
                                    precision=0,
                                    minimum=1024,
                                    maximum=16384
                                )
                        
                        with gr.Row():
                            f1_start_btn = gr.Button("üöÄ ÂºÄÂßãÂ§ÑÁêÜ", variant="primary", size="lg")
                        
                        with gr.Row():
                            with gr.Column(scale=1):
                                f1_output_status = gr.Textbox(
                                    label="Â§ÑÁêÜÁä∂ÊÄÅ",
                                    placeholder="Á≠âÂæÖÂºÄÂßã...",
                                    lines=15,
                                    max_lines=20,
                                    interactive=False
                                )
                            
                            with gr.Column(scale=1):
                                f1_llm_output = gr.Textbox(
                                    label="ü§ñ LLMÂÆûÊó∂ËæìÂá∫",
                                    placeholder="LLMËøîÂõûÁöÑÂÜÖÂÆπÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...",
                                    lines=15,
                                    max_lines=20,
                                    interactive=False
                                )
                        
                        # ÁªëÂÆöÂäüËÉΩ‰∫åÁöÑÂ§ÑÁêÜ‰∫ã‰ª∂
                        f1_start_btn.click(
                            fn=generator_feature2.run_process,
                            inputs=[
                                f1_input_file,
                                f1_output_file,
                                f1_residue_file,
                                f1_max_lines,
                                f1_concurrency,
                                f1_model,
                                f1_temperature,
                                f1_max_tokens
                            ],
                            outputs=[f1_output_status, f1_llm_output]
                        )
                        
                        gr.Markdown("""
                        ---
                        ### üìñ ÂäüËÉΩËØ¥Êòé
                        
                        Ê≠§ÂäüËÉΩÁî®‰∫éÂØπÂ§öË∑≥ÈóÆÈ¢òËøõË°åÂ∑•ÂÖ∑Ê†áÊ≥®ÔºåÂåÖÊã¨Ôºö
                        - ÂàÜÊûêÈóÆÈ¢òÁ±ªÂûã
                        - ÈÄâÊã©ÂêàÈÄÇÁöÑÂ∑•ÂÖ∑
                        - Á°ÆÂÆöÊâßË°åË∑ØÂæÑÔºàcase1/case2/case3/case4Ôºâ
                        """)
                    
                    # ÂäüËÉΩ‰∫å - Êñá‰ª∂Êü•ÁúãÂô®
                    with gr.Tab("üìÇ Êñá‰ª∂Êü•ÁúãÂô®"):
                        create_file_viewer(generator_feature2, "ÂäüËÉΩ‰∫å")
                        
                        gr.Markdown("""
                        ---
                        ### üìñ Êñá‰ª∂Êü•ÁúãÂô®ËØ¥Êòé
                        
                        - **ËæìÂÖ•Êñá‰ª∂**: Êü•ÁúãÂéüÂßãÈóÆÈ¢òÊï∞ÊçÆ
                        - **ËæìÂá∫Êñá‰ª∂**: Êü•ÁúãÊ†áÊ≥®ÂêéÁöÑÊï∞ÊçÆÔºàÂåÖÂê´reasoning„ÄÅtool_select„ÄÅroute_selectÔºâ
                        - **Ëá™ÂÆö‰πâË∑ØÂæÑ**: Êü•Áúã‰ªªÊÑèJSONLÊñá‰ª∂
                        """)
            
            # ==================== ÂäüËÉΩ‰∏âÔºöÊï∞ÊçÆÁîüÊàê‰∏éÊ†°È™å ====================
            with gr.Tab("üé≤ ÂäüËÉΩ‰∏âÔºöÊï∞ÊçÆÁîüÊàê‰∏éÊ†°È™å"):
                with gr.Tabs():
                    # ÂäüËÉΩ‰∏â - Êï∞ÊçÆÂ§ÑÁêÜ
                    with gr.Tab("üìù Êï∞ÊçÆÂ§ÑÁêÜ"):
                        gr.Markdown("""
                        ### üé≤ Êï∞ÊçÆÁîüÊàê‰∏éÊ†°È™å
                        
                        Êï¥Âêà stage_2_generate Âíå stage_3_judge ÁöÑÂäüËÉΩÔºåËá™Âä®ÁîüÊàêÊï∞ÊçÆÂπ∂ËøõË°åÊ†°È™å„ÄÇ
                        """)
                        
                        with gr.Row():
                            with gr.Column(scale=2):
                                gr.Markdown("### üìÅ Êñá‰ª∂Ë∑ØÂæÑÈÖçÁΩÆ")
                                
                                # ËæìÂÖ•Êñá‰ª∂ÈÖçÁΩÆÔºà‰ªéÂäüËÉΩ‰∫åËá™Âä®Ëé∑ÂèñÔºâ
                                gen_input_folder = gr.Textbox(
                                    label="ËæìÂÖ•Êñá‰ª∂Â§πË∑ØÂæÑÔºàËá™Âä®‰ªéÂäüËÉΩ‰∫åËé∑ÂèñÔºâ",
                                    placeholder="/path/to/folder/",
                                    value=""
                                )
                                
                                with gr.Row():
                                    gen_input_file_dropdown = gr.Dropdown(
                                        label="ÈÄâÊã©ËæìÂÖ•Êñá‰ª∂",
                                        choices=[],
                                        value=None,
                                        interactive=True
                                    )
                                    
                                    gen_refresh_input_btn = gr.Button("üîÑ Âà∑Êñ∞", size="sm", scale=0)
                                
                                gen_input_file = gr.Textbox(
                                    label="ÂÆåÊï¥ËæìÂÖ•Ë∑ØÂæÑ",
                                    interactive=False,
                                    placeholder="Ëá™Âä®ÁîüÊàê..."
                                )
                                
                                gen_system_prompt = gr.Textbox(
                                    label="System PromptÊñá‰ª∂Ë∑ØÂæÑ",
                                    value=os.path.join(os.path.dirname(current_dir), "stage_2_generate", "prompts", "opt_sys_prompt.txt")
                                )
                                
                                gen_user_prompt = gr.Textbox(
                                    label="User PromptÊñá‰ª∂Ë∑ØÂæÑ",
                                    value=os.path.join(os.path.dirname(current_dir), "stage_2_generate", "prompts", "opt_user_prompt.txt")
                                )
                                
                                gen_tool_bank = gr.Textbox(
                                    label="Tool BankË∑ØÂæÑ",
                                    value=os.path.join(os.path.dirname(current_dir), "stage_2_generate", "tool_bank", "tools")
                                )
                            
                            with gr.Column(scale=1):
                                gr.Markdown("### ‚öôÔ∏è Â§ÑÁêÜÂèÇÊï∞ÈÖçÁΩÆ")
                                
                                gen_model = gr.Dropdown(
                                    label="Ê®°ÂûãÈÄâÊã©",
                                    choices=[
                                        "anthropic.claude-sonnet-4",
                                        "anthropic.claude-3-5-sonnet",
                                        "anthropic.claude-3-opus",
                                        "gpt-4.1"
                                    ],
                                    value="gpt-4.1"
                                )
                                
                                gen_temperature = gr.Slider(
                                    label="Temperature",
                                    minimum=0.0,
                                    maximum=1.0,
                                    value=0.0,
                                    step=0.1
                                )
                                
                                gen_max_tokens = gr.Number(
                                    label="Max Tokens",
                                    value=8192,
                                    precision=0,
                                    minimum=1024,
                                    maximum=16384
                                )
                                
                                gen_virtual_min = gr.Number(
                                    label="ËôöÊãüÂ∑•ÂÖ∑ÊúÄÂ∞èÊï∞Èáè",
                                    value=3,
                                    precision=0,
                                    minimum=0
                                )
                                
                                gen_virtual_max = gr.Number(
                                    label="ËôöÊãüÂ∑•ÂÖ∑ÊúÄÂ§ßÊï∞Èáè",
                                    value=8,
                                    precision=0,
                                    minimum=1
                                )
                        
                        with gr.Row():
                            with gr.Column():
                                gr.Markdown("### üìã CasesÈÖçÁΩÆÔºàJSONÊ†ºÂºèÔºâ")
                                
                                gen_cases_config = gr.Code(
                                    label="CasesÈÖçÁΩÆ",
                                    language="json",
                                    value="""{
    "case_C1": {
        "target_count": 10,
        "data_output": "/path/to/output/case_C1_data.jsonl",
        "score_output": "/path/to/output/case_C1_score.jsonl"
    },
    "case_C2": {
        "target_count": 10,
        "data_output": "/path/to/output/case_C2_data.jsonl",
        "score_output": "/path/to/output/case_C2_score.jsonl"
    }
}""",
                                    lines=15
                                )
                                
                                gr.Markdown("""
                                **ÈÖçÁΩÆËØ¥ÊòéÔºö**
                                - `target_count`: ÁõÆÊ†áÁîüÊàêÊï∞Èáè
                                - `data_output`: ÁîüÊàêÊï∞ÊçÆ‰øùÂ≠òË∑ØÂæÑ
                                - `score_output`: ÊâìÂàÜÁªìÊûú‰øùÂ≠òË∑ØÂæÑ
                                - ÂèØÊ∑ªÂä†‰ªªÊÑèÂ§ö‰∏™caseÈÖçÁΩÆ
                                """)
                        
                        with gr.Row():
                            gen_start_btn = gr.Button("üöÄ ÂºÄÂßãÁîüÊàê‰∏éÊ†°È™å", variant="primary", size="lg")
                        
                        with gr.Row():
                            with gr.Column(scale=1):
                                gen_output_status = gr.Textbox(
                                    label="Â§ÑÁêÜÁä∂ÊÄÅ",
                                    placeholder="Á≠âÂæÖÂºÄÂßã...",
                                    lines=20,
                                    max_lines=25,
                                    interactive=False
                                )
                            
                            with gr.Column(scale=1):
                                gen_process_log = gr.Textbox(
                                    label="üìã Â§ÑÁêÜÊó•Âøó",
                                    placeholder="Â§ÑÁêÜÊó•ÂøóÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...",
                                    lines=20,
                                    max_lines=25,
                                    interactive=False
                                )
                        
                        # ÂÆö‰πâÂäüËÉΩ‰∏âÁöÑËæÖÂä©ÂáΩÊï∞
                        def update_gen_input_files_from_folder(folder_path):
                            """Êâ´ÊèèÊñá‰ª∂Â§πÂπ∂Êõ¥Êñ∞ËæìÂÖ•Êñá‰ª∂‰∏ãÊãâÊ°Ü"""
                            if not folder_path or not os.path.exists(folder_path):
                                return gr.update(choices=[], value=None)
                            
                            files = scan_folder_for_files(folder_path, ".jsonl")
                            return gr.update(choices=files, value=files[0] if files else None)
                        
                        def update_gen_input_full_path_from_selection(folder, filename):
                            """Ê†πÊçÆÈÄâÊã©ÁöÑÊñá‰ª∂Êõ¥Êñ∞ÂÆåÊï¥Ë∑ØÂæÑ"""
                            return get_full_path(folder, filename) if filename else ""
                        
                        # ÊâãÂä®Âà∑Êñ∞ÊåâÈíÆ
                        gen_refresh_input_btn.click(
                            fn=update_gen_input_files_from_folder,
                            inputs=[gen_input_folder],
                            outputs=[gen_input_file_dropdown]
                        )
                        
                        # Êñá‰ª∂Â§πË∑ØÂæÑÊîπÂèòÊó∂ÔºåËá™Âä®Êâ´Êèè
                        gen_input_folder.change(
                            fn=update_gen_input_files_from_folder,
                            inputs=[gen_input_folder],
                            outputs=[gen_input_file_dropdown]
                        )
                        
                        # Êñá‰ª∂ÈÄâÊã©ÊîπÂèòÊó∂ÔºåÊõ¥Êñ∞ÂÆåÊï¥Ë∑ØÂæÑ
                        gen_input_file_dropdown.change(
                            fn=update_gen_input_full_path_from_selection,
                            inputs=[gen_input_folder, gen_input_file_dropdown],
                            outputs=[gen_input_file]
                                )
                        
                        # ÁªëÂÆöÂäüËÉΩ‰∏âÁöÑÂ§ÑÁêÜ‰∫ã‰ª∂
                        gen_start_btn.click(
                            fn=generator_gen_judge.process_data_generate_judge,
                            inputs=[
                                gen_input_file,
                                gen_model,
                                gen_temperature,
                                gen_max_tokens,
                                gen_system_prompt,
                                gen_user_prompt,
                                gen_tool_bank,
                                gen_virtual_min,
                                gen_virtual_max,
                                gen_cases_config
                            ],
                            outputs=[gen_output_status, gen_process_log]
                        )
                        
                        gr.Markdown("""
                        ---
                        ### üìñ ÂäüËÉΩËØ¥Êòé
                        
                        Ê≠§ÂäüËÉΩÊï¥Âêà‰∫ÜÊï∞ÊçÆÁîüÊàêÂíåÊ†°È™åÊµÅÁ®ãÔºö
                        
                        **ÁîüÊàêÈò∂ÊÆµÔºö**
                        1. ËØªÂèñÈ¢ÑÂ§ÑÁêÜÁöÑÊ†áÊ≥®Êï∞ÊçÆ
                        2. Ê†πÊçÆÈÖçÁΩÆÁîüÊàêÂ§öËΩÆÂØπËØùÊï∞ÊçÆ
                        3. ‰ΩøÁî®ËôöÊãüÂ∑•ÂÖ∑Â∫ìÂ¢ûÂº∫Êï∞ÊçÆÂ§öÊ†∑ÊÄß
                        
                        **Ê†°È™åÈò∂ÊÆµÔºö**
                        1. ËßÑÂàôÊ†°È™åÔºöÊ£ÄÊü•Ê†ºÂºè„ÄÅÂ∑•ÂÖ∑Ë∞ÉÁî®„ÄÅÂèÇÊï∞Á≠â
                        2. LLMÊ†°È™åÔºö‰ΩøÁî®GPTËØÑ‰º∞ÂØπËØùË¥®Èáè
                        3. ÊâìÂàÜÔºörule_score (0/1) + gpt_score (0/1) = total_score (0-2)
                        
                        **ËæìÂá∫ÁªìÊûúÔºö**
                        - ÁîüÊàêÊï∞ÊçÆÊñá‰ª∂ÔºöÂåÖÂê´ÂÆåÊï¥ÁöÑÂØπËØùÊï∞ÊçÆ
                        - ÊâìÂàÜÊñá‰ª∂ÔºöÂåÖÂê´ÊØèÊù°Êï∞ÊçÆÁöÑËØÑÂàÜÂíåÂéüÂõ†
                        
                        **ËØÑÂàÜÊ†áÂáÜÔºö**
                        - total_score = 2ÔºöÈÄöËøáÊâÄÊúâÊ†°È™åÔºå‰øùÂ≠òÂà∞ÁîüÊàêÊï∞ÊçÆÊñá‰ª∂
                        - total_score < 2ÔºöÊ†°È™åÂ§±Ë¥•Ôºå‰ªÖËÆ∞ÂΩïÊâìÂàÜ‰ø°ÊÅØ
                        """)
                    
                    # ÂäüËÉΩ‰∏â - Êñá‰ª∂Êü•ÁúãÂô®ÔºàÂ¢ûÂº∫ÁâàÔºöÊîØÊåÅÂ§öÊñá‰ª∂Ôºâ
                    with gr.Tab("üìÇ Êñá‰ª∂Êü•ÁúãÂô®"):
                        gr.Markdown("""
                        ### üìñ Â§öÊñá‰ª∂Êü•ÁúãÂô®
                        
                        Êü•ÁúãËæìÂÖ•Êñá‰ª∂ÂíåÊâÄÊúâÁîüÊàêÁöÑËæìÂá∫Êñá‰ª∂ÔºàÂåÖÊã¨Êï∞ÊçÆÊñá‰ª∂ÂíåÊâìÂàÜÊñá‰ª∂Ôºâ„ÄÇ
                        """)
                        
                        with gr.Row():
                            with gr.Column(scale=1):
                                gen_file_selector = gr.Dropdown(
                                    label="ÈÄâÊã©Êñá‰ª∂",
                                    choices=["ËæìÂÖ•Êñá‰ª∂"],
                                    value="ËæìÂÖ•Êñá‰ª∂",
                                    interactive=True
                                )
                                
                                gen_refresh_btn = gr.Button("üîÑ Âà∑Êñ∞Êñá‰ª∂ÂàóË°®", size="sm")
                                
                                gen_custom_path = gr.Textbox(
                                    label="ÊàñËæìÂÖ•Ëá™ÂÆö‰πâË∑ØÂæÑ",
                                    placeholder="/path/to/your/file.jsonl",
                                    visible=True
                                )
                                
                                gen_line_number = gr.Slider(
                                    label="ÈÄâÊã©Ë°åÂè∑",
                                    minimum=1,
                                    maximum=100,
                                    value=1,
                                    step=1,
                                    interactive=True
                                )
                                
                                gen_view_btn = gr.Button("üîç Êü•ÁúãÂÜÖÂÆπ", variant="primary")
                            
                            with gr.Column(scale=2):
                                gen_file_info = gr.Textbox(
                                    label="Êñá‰ª∂‰ø°ÊÅØ",
                                    lines=5,
                                    interactive=False
                                )
                                
                                gen_line_content = gr.Textbox(
                                    label="Ë°åÂÜÖÂÆπÔºàJSONÊ†ºÂºèÔºâ",
                                    lines=20,
                                    interactive=False
                                )
                        
                        # Âà∑Êñ∞Êñá‰ª∂ÂàóË°®
                        def refresh_file_list():
                            files = generator_gen_judge.get_all_output_files()
                            if not files:
                                return gr.update(choices=["ËæìÂÖ•Êñá‰ª∂", "Ëá™ÂÆö‰πâË∑ØÂæÑ"], value="ËæìÂÖ•Êñá‰ª∂")
                            
                            file_choices = [name for name, _ in files]
                            file_choices.append("Ëá™ÂÆö‰πâË∑ØÂæÑ")
                            return gr.update(choices=file_choices, value=file_choices[0] if file_choices else "ËæìÂÖ•Êñá‰ª∂")
                        
                        # Êü•ÁúãÊñá‰ª∂ÂÜÖÂÆπ
                        def view_gen_file_content(file_selector, custom_path, line_number):
                            # Á°ÆÂÆöÊñá‰ª∂Ë∑ØÂæÑ
                            if file_selector == "Ëá™ÂÆö‰πâË∑ØÂæÑ":
                                file_path = custom_path
                            elif file_selector == "ËæìÂÖ•Êñá‰ª∂":
                                file_path = generator_gen_judge.current_input_file
                            else:
                                # ‰ªéËæìÂá∫Êñá‰ª∂‰∏≠Êü•Êâæ
                                files = generator_gen_judge.get_all_output_files()
                                file_path = None
                                for name, path in files:
                                    if name == file_selector:
                                        file_path = path
                                        break
                                
                                if not file_path:
                                    return "Êñá‰ª∂Êú™ÊâæÂà∞", ""
                            
                            if not file_path:
                                return "ËØ∑ÈÄâÊã©Êñá‰ª∂ÊàñËæìÂÖ•Ë∑ØÂæÑ", ""
                            
                            # Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÂíåÂÜÖÂÆπ
                            info, total_lines = generator_gen_judge.get_file_info(file_path)
                            
                            if line_number and line_number > 0:
                                content = generator_gen_judge.get_line_content(file_path, int(line_number))
                            else:
                                content = "ËØ∑ËæìÂÖ•Ë¶ÅÊü•ÁúãÁöÑË°åÂè∑"
                            
                            return info, content
                        
                        # Êõ¥Êñ∞Ë°åÂè∑ÊªëÂùóÊúÄÂ§ßÂÄº
                        def update_gen_slider(file_selector, custom_path):
                            if file_selector == "Ëá™ÂÆö‰πâË∑ØÂæÑ":
                                file_path = custom_path
                            elif file_selector == "ËæìÂÖ•Êñá‰ª∂":
                                file_path = generator_gen_judge.current_input_file
                            else:
                                files = generator_gen_judge.get_all_output_files()
                                file_path = None
                                for name, path in files:
                                    if name == file_selector:
                                        file_path = path
                                        break
                            
                            if not file_path or not os.path.exists(file_path):
                                return gr.update(maximum=1, value=1)
                            
                            _, total_lines = generator_gen_judge.get_file_info(file_path)
                            return gr.update(maximum=max(1, total_lines), value=1)
                        
                        # ÁªëÂÆö‰∫ã‰ª∂
                        gen_refresh_btn.click(
                            fn=refresh_file_list,
                            outputs=[gen_file_selector]
                        )
                        
                        gen_file_selector.change(
                            fn=update_gen_slider,
                            inputs=[gen_file_selector, gen_custom_path],
                            outputs=[gen_line_number]
                        )
                        
                        gen_custom_path.change(
                            fn=update_gen_slider,
                            inputs=[gen_file_selector, gen_custom_path],
                            outputs=[gen_line_number]
                        )
                        
                        gen_view_btn.click(
                            fn=view_gen_file_content,
                            inputs=[gen_file_selector, gen_custom_path, gen_line_number],
                            outputs=[gen_file_info, gen_line_content]
                        )
                        
                        gen_line_number.change(
                            fn=view_gen_file_content,
                            inputs=[gen_file_selector, gen_custom_path, gen_line_number],
                            outputs=[gen_file_info, gen_line_content]
                        )
                        
                        gr.Markdown("""
                        ---
                        ### üìñ Êñá‰ª∂Êü•ÁúãÂô®ËØ¥Êòé
                        
                        - **ËæìÂÖ•Êñá‰ª∂**ÔºöÊü•ÁúãÂéüÂßãËæìÂÖ•Êï∞ÊçÆ
                        - **case_XX-Êï∞ÊçÆ**ÔºöÊü•ÁúãËØ•caseÁîüÊàêÁöÑÂØπËØùÊï∞ÊçÆ
                        - **case_XX-ÊâìÂàÜ**ÔºöÊü•ÁúãËØ•caseÁöÑËØÑÂàÜÁªìÊûú
                        - **Ëá™ÂÆö‰πâË∑ØÂæÑ**ÔºöÊü•Áúã‰ªªÊÑèJSONLÊñá‰ª∂
                        - ‰ΩøÁî®"üîÑ Âà∑Êñ∞Êñá‰ª∂ÂàóË°®"ÊåâÈíÆÊõ¥Êñ∞ÂèØÁî®Êñá‰ª∂ÂàóË°®
                        """)
        
        # ==================== Ë∑®ÂäüËÉΩÁöÑ‰∫ã‰ª∂ÁªëÂÆö ====================
        # ÈúÄË¶ÅÂú®ËøôÈáåÂÆö‰πâË∑®TabÁöÑ‰∫ã‰ª∂ÁªëÂÆöÔºàÊâÄÊúâÁªÑ‰ª∂ÈÉΩÂ∑≤ÂàõÂª∫ÂÆåÊàêÔºâ
        
        # ÂÆö‰πâËæÖÂä©ÂáΩÊï∞
        def extract_folder_from_f2_output(f2_output_path):
            """
            ‰ªéÂäüËÉΩ‰∫åÁöÑËæìÂá∫Ë∑ØÂæÑ‰∏≠ÊèêÂèñÊñá‰ª∂Â§πË∑ØÂæÑ
            
            Êô∫ËÉΩÂà§Êñ≠Ôºö
            1. Â¶ÇÊûúËæìÂÖ•ÊòØÊñá‰ª∂Ë∑ØÂæÑÔºà.jsonlÁªìÂ∞æÔºâ‚Üí ÊèêÂèñÊñá‰ª∂Â§π
            2. Â¶ÇÊûúËæìÂÖ•Êú¨Ë∫´Â∞±ÊòØÊñá‰ª∂Â§π ‚Üí Áõ¥Êé•‰ΩøÁî®
            3. Â¶ÇÊûúË∑ØÂæÑ‰∏çÂ≠òÂú® ‚Üí Â∞ùËØïÊèêÂèñÊñá‰ª∂Â§πÈÉ®ÂàÜ
            """
            if not f2_output_path:
                return "", gr.update(choices=[], value=None), ""
            
            # Âà§Êñ≠ËæìÂÖ•Ë∑ØÂæÑÁöÑÁ±ªÂûã
            if os.path.exists(f2_output_path):
                # Ë∑ØÂæÑÂ≠òÂú®ÔºåÂà§Êñ≠ÊòØÊñá‰ª∂ËøòÊòØÊñá‰ª∂Â§π
                if os.path.isdir(f2_output_path):
                    # Êú¨Ë∫´Â∞±ÊòØÊñá‰ª∂Â§π
                    folder_path = f2_output_path
                else:
                    # ÊòØÊñá‰ª∂ÔºåÊèêÂèñÊñá‰ª∂Â§π
                    folder_path = os.path.dirname(f2_output_path)
            else:
                # Ë∑ØÂæÑ‰∏çÂ≠òÂú®ÔºåÊ†πÊçÆÊâ©Â±ïÂêçÂà§Êñ≠
                if f2_output_path.endswith('.jsonl'):
                    # ÁúãËµ∑Êù•ÊòØÊñá‰ª∂Ë∑ØÂæÑÔºåÊèêÂèñÊñá‰ª∂Â§π
                    folder_path = os.path.dirname(f2_output_path)
                else:
                    # ÂèØËÉΩÊú¨Ë∫´Â∞±ÊòØÊñá‰ª∂Â§πË∑ØÂæÑ
                    folder_path = f2_output_path
            
            # Êâ´ÊèèÊñá‰ª∂
            files = scan_folder_for_files(folder_path, ".jsonl") if folder_path and os.path.exists(folder_path) else []
            
            return (
                folder_path,
                gr.update(choices=files, value=files[0] if files else None),
                get_full_path(folder_path, files[0]) if files else ""
            )
        
        # ÂäüËÉΩ‰∫åËæìÂá∫Ë∑ØÂæÑÊîπÂèòÊó∂ÔºåËá™Âä®Êõ¥Êñ∞ÂäüËÉΩ‰∏âËæìÂÖ•
        f1_output_file.change(
            fn=extract_folder_from_f2_output,
            inputs=[f1_output_file],
            outputs=[gen_input_folder, gen_input_file_dropdown, gen_input_file]
        )
        
        # Â∫ïÈÉ®ËØ¥Êòé
        gr.Markdown("""
        ---
        ### üéØ ‰ΩøÁî®ÊåáÂçó
        
        #### üìö ÂäüËÉΩÊû∂ÊûÑ
        - **ÂäüËÉΩ‰∏ÄÔºöÂ∑•ÂÖ∑Âèò‰ΩìÁîüÊàê** - Âü∫‰∫éÂéüÂßãÂ∑•ÂÖ∑Ëá™Âä®ÁîüÊàêËØ≠‰πâÁõ∏‰ººÁöÑÂèò‰ΩìÂ∑•ÂÖ∑
        - **ÂäüËÉΩ‰∫åÔºöÂ∑•ÂÖ∑Ê†áÊ≥®** - ‰ΩøÁî®LLMÂØπÂ§öË∑≥ÈóÆÈ¢òËøõË°åÂ∑•ÂÖ∑ÈÄâÊã©ÂíåË∑ØÂæÑËßÑÂàí
        - **ÂäüËÉΩ‰∏âÔºöÊï∞ÊçÆÁîüÊàê‰∏éÊ†°È™å** - Êï¥ÂêàÊï∞ÊçÆÁîüÊàêÂíåË¥®ÈáèÊ†°È™åÊµÅÁ®ã
        
        #### üîß Â¶Ç‰ΩïÊ∑ªÂä†Êñ∞ÂäüËÉΩ
        1. ÂàõÂª∫Êñ∞ÁöÑÂ§ÑÁêÜÁ±ªÔºàÂèÇËÄÉ `feature_template.py`Ôºâ
        2. ÂÆûÁé∞Â§ÑÁêÜÈÄªËæëÂíåÊñá‰ª∂Êìç‰ΩúÊñπÊ≥ï
        3. Âú®‰∏ªÁïåÈù¢Ê∑ªÂä†Êñ∞ÁöÑTab
        4. ‰ΩøÁî® `create_file_viewer()` Âø´ÈÄüÂàõÂª∫Êñá‰ª∂Êü•ÁúãÂô®
        
        #### ‚öôÔ∏è ÊØè‰∏™ÂäüËÉΩÂåÖÂê´
        - **Êï∞ÊçÆÂ§ÑÁêÜÈ°µÈù¢**ÔºöÈÖçÁΩÆÂèÇÊï∞Âπ∂ÊâßË°åÂ§ÑÁêÜ‰ªªÂä°
        - **Êñá‰ª∂Êü•ÁúãÂô®È°µÈù¢**ÔºöÊü•ÁúãËæìÂÖ•/ËæìÂá∫Êñá‰ª∂ÂÜÖÂÆπ
        - **ÂÆûÊó∂ÂèçÈ¶à**ÔºöÂ§ÑÁêÜÁä∂ÊÄÅÂíåÁªìÊûúÂÆûÊó∂Â±ïÁ§∫
        """)
    
    return demo

# ÂêØÂä®Â∫îÁî®
if __name__ == "__main__":
    demo = create_ui()
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )
